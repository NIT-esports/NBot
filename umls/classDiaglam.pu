@startuml Discord-bot

package Commands
{
    interface ICommand
    {
        +<<readonly>>name: string
        +<<readonly>>description: string
        +<<async>>execute(interaction: CommandInteraction<CacheType>): any
        +toCommandData(): ApplicationCommandData
    }
    interface ICallbackableButtonInteraction
    {
        +callback(interaction: ButtonInteraction): any
    }
    class CommandList
    class Help
    class Room
    class Teaming
    class Who
}

package Networks
{
    package Models
    {
        package Query
        {
            class ID
            {
                +id: string
            }

            class Campus 
            {
                +campus: string
            }
        }

        class RoomData
        {
            +campus: string
            +inmates: MemberData[]
        }

        class DiscordData
        {
            +id: string
            +nickname: string
        }

        class GameData
        {
            +title: string
            +id: string
        }

        class MemberData
        {
            +discord: DiscordData
        }

        class MemberFullData
        {
            +games: GameData[]
        }

        class StudentData 
        {
            +id: number
            +name: string
        }

        class NoneResponse
        interface IDto
        interface IQuery
        {
            +toObject: object
        }
    }

    enum AccessPoint
    {
        MEMBER_SEARCH,
        MEMBER_UPDATE,
        MEMBER_REGISTER,
        ROOM_STATE
    }

    class Network
    {
        +<<async>>{static}get<Response extends IDto>(accessPoint: AccessPoint, query: IQuery | undefined): Promise<Response | null>
        +<<async>>{static}post<Request extends IDto, Response extends IDto>(accessPoint: AccessPoint, data: Request, query: IQuery | undefined): Promise<Response | null>
    }
}

package Utils
{
    class Team
    {
        -_max: number
        -_members: GuildMember[]
        -_name: string
        +<<getter>>isEmpty(): boolean
        +<<getter>>isMax(): boolean
        +<<getter>>max(): number
        +<<getter>>members()
        +<<getter>>name(): string
        +add(member: GuildMember): void
        +addAll(members: GuildMember[]): void
        +has(member: GuildMember): boolean
        +remove(member: GuildMember): void
        +{static}random(members: Collection<string, GuildMember>, size: number): Team[]
    }
}

Help ..|> ICommand
Room ..|> ICommand
Teaming ..|> ICommand
Who ..|> ICommand

RoomData ..|> IDto
DiscordData ..|> IDto
GameData ..|> IDto
StudentData ..|> IDto
NoneResponse ..|> IDto
MemberData ..|> StudentData
MemberFullData ..|> MemberData

Room ..|> ICallbackableButtonInteraction

Campus ..|> IQuery
ID ..|> IQuery

ICommand -* CommandList
DiscordData -* MemberData
GameData -* MemberFullData
MemberData -* RoomData

Help ..> CommandList
Teaming .up.> Team
Room .up.> Network
Who .up.> Network
Network .up.> IQuery
Network .up.> IDto

Network --> AccessPoint

@enduml