@startuml Discord-bot

package Commands
{
    abstract class Command
    {
        +<<readonly>>name: string
        +<<readonly>>description: string
        +<<async>>execute(interaction: CommandInteraction<CacheType>): any
        +toCommandData(): ApplicationCommandData
    }
    class CommandList
    class Help
    class Teaming
    class Who
}

package Networks
{
    package Models
    {
        package Query
        {
            class ID
            {
                id: string
            }
        }

        package Requests
        {
            class InRoomMember
            {
                +id: number
                +name: string
                +DiscordID: string
            }

            class RoomData
            {
                campus: string
                inmates: InRoomMember[]
            }
        }

        package Responses
        {
            class DiscordData
            {
                id: string
                nickname: string
                tag: string
            }

            class GameData
            {
                title: string
                id: string
            }

            class MemberData
            {
                id: number
                name: string
                discord: DiscordData
                games: GameData[]
            }

            class NoneResponse
        }
        class DTO
        interface IQuery
        {
            +toObject: object
        }
    }

    class Network
    {
        +<<async>>{static}get<Response extends DTO>(url: string, query: IQuery | undefined): Promise<Response | null>
        +<<async>>{static}post<Request extends DTO, Response extends DTO>(url: string, data: Request, query: IQuery | undefined): Promise<Response | null>
    }
}

package Utils
{
    class Team
    {
        -_max: number
        -_members: GuildMember[]
        -_name: string
        +<<getter>>isEmpty(): boolean
        +<<getter>>isMax(): boolean
        +<<getter>>max(): number
        +<<getter>>members()
        +<<getter>>name(): string
        +add(member: GuildMember): void
        +addAll(members: GuildMember[]): void
        +has(member: GuildMember): boolean
        +remove(member: GuildMember): void
        +{static}random(members: Collection<string, GuildMember>, size: number): Team[]
    }

    class VCC
    {
        -_voiceState: VoiceState
        +<<getter>>name(): string
        +<<getter>>role(): Promise<Role>
        +<<getter>>channel(): GuildChannel | undefined
        +<<readonly>>{static}IDENTIFIER: string
        +{static}isConnectedVC(oldState: VoiceState, newState: VoiceState): boolean
        +{static}isLeavedVC(oldState: VoiceState, newState: VoiceState): boolean
        +{static}isSwitchedVC(oldState: VoiceState, newState: VoiceState): boolean
        +<<async>>create(): Promise<GuildChannel>
        +<<async>>isViewableMember(member: GuildMember): Promise<boolean>
        +<<async>>join(member: GuildMember): Promise<void>
        +<<async>>leave(member: GuildMember): Promise<void>
    }
}

Help --|> Command
Teaming --|> Command
Who --|> Command

InRoomMember --|> DTO
RoomData --|> DTO
DiscordData --|> DTO
GameData --|> DTO
MemberData --|> DTO
NoneResponse --|> DTO

ID ..|> IQuery

Command --* CommandList
InRoomMember --* RoomData
GameData --* MemberData
DiscordData --* MemberData

Help ..> CommandList
Teaming .up.> Team
Who .up.> Network
Network .up.> IQuery
Network .up.> DTO

@enduml