@startuml Discord-bot

package Commands
{
    package Parameters
    {
        package Omittable
        {
            class OmittableCommandParameter
            class OmittableMemberParameter
            class OmittableMembersParameter
            class OmittableNumberParameter
        }

        package Required
        {
            class CommandParameter
            class FreeWriteParameter
            class MemberParameter
            class MembersParameter
            class NumberParameter
        }

        interface IOmittable<T>
        {
            +default: T
        }

        abstract Parameter<T>
        {
            #_name: string
            #_detail: string
            #_value: T | null
            +<<getter>>name(): string
            +<<getter>>detail(): string
            +<<getter>>valueOrDefault(): T | null
            +{abstract}setValue(message: Message, index: number): void
        }
    }
    abstract class Command
    {
        +<<readonly>>name: string
        +<<readonly>>detail: string
        +<<readonly>>parameters: Parameter<any>[]
        #_result: MessageEmbed | null
        +<<getter>>grammar():string
        +info: ExecutionInfo
        +<<readonly>>{static}IDENTIFIER: string
        +<<readonly>>{static}PUNCTUATION: string
        +{static}clone(commandName: sting): Command
        +{static}isCommand(content: string): boolean
        +{static}parse(message: Message): Command | null
        -setParameters(message: Message): void
        +<<async>>send(): Promise<Message | undefined>
        +<<async>>execute(): Promise<void>
    }

    class CommandFactory
    interface IExecutedCallback
    {
        +onCompleted(message: Message): void
    }

    together {
        class Help
        class RandomTeamChat
        class RandomTeamVoice
        class Recruit
        class Who
    }
}

package Networks
{
    package Models
    {
        package Query
        {
            class DiscordID
            {
                id: string
            }

            class FormTaskUpdate
            {
                method: string
            }
        }

        package Requests
        {
            class DiscordUpdate
            {
                id: string
                nickname: sting
            }

            class FormTask
            {
                +<<readonly>>type: FormType
                +<<readonly>>guild: Guild
                +<<readonly>>channel: Channel
                +<<readonly>>message: Message
                +<<readonly>>creator: GuildMember
                +<<readonly>>reactions: string[]
                +<<readonly>>endTime: Date
                +<<async>>{static}parse(client: Client, data: any): FormTask
                +toJSON(): object
            }

            class InRoomMember
            {
                +id: number
                +name: string
                +DiscordID: string
            }

            class RoomData
            {
                campus: string
                inmates: InRoomMember[]
            }
        }

        package Responses
        {
            class DiscordData
            {
                id: string
                nickname: string
                tag: string
            }

            class FormTaskData
            {
                task: FormTask[]
            }

            class GameData
            {
                title: string
                id: string
            }

            class MemberData
            {
                id: number
                name: string
                discord: DiscordData
                games: GameData[]
            }

            class NoneResponse
        }
        class DTO
        interface IQuery
        {
            +toObject: object
        }
    }

    class Network
    {
        +<<async>>{static}get<Response extends DTO>(url: string, query: IQuery | undefined): Promise<Response | null>
        +<<async>>{static}post<Request extends DTO, Response extends DTO>(url: string, data: Request, query: IQuery | undefined): Promise<Response | null>
    }
}

package Forms
{
    abstract Form
    {
        #<<readonly>>_openTime: Data
        #<<readonly>>_filter: CollectorFilter
        #_task: FormTask
        #_isClose: boolean
        +<<getter>>isClose(): boolean
        +<<async>>{static}reboot(client: Client): void
        +{static}create(task: FormTask): Form
        +{abstract}toMessageEmbed(): MessageEmbed
        +<<async>>{abstract}onRebooted(): Promise<void>
        +{abstract}onReacted(reaction: MessageReaction, reactionMember: GuildMember): void
        +{abstract}onUpdate(embed: MessageEmbed): void
        +{abstract}onClosed(embed: MessageEmbed): void
        +<<async>>open(isOpened: boolean): void
        +update(): void
        +close():void
    }

    enum FormType
    {
        RECRUIT,
        ROOM
    }

    class RecruitForm
    {
        -_respondents: Team
        -onReactionByJoin(member: GuildMember):void
        -onReactionByCancel(reaction: MessageReaction, member: GuildMember): void
        -onReactionByClose(member: GuildMember): void
    }
}

package Utils
{
    interface IFactory<T>
    {
        +create(arg: any): T
    }


    class Team
    {
        -_max: number
        -_members: GuildMember[]
        -_name: string
        +<<getter>>isEmpty(): boolean
        +<<getter>>isMax(): boolean
        +<<getter>>max(): number
        +<<getter>>members()
        +<<getter>>name(): string
        +add(member: GuildMember): void
        +addAll(members: GuildMember[]): void
        +has(member: GuildMember): boolean
        +remove(member: GuildMember): void
        +{static}random(members: GuildMember[], size: number): Team[]
    }

    class VCC
    {
        -_voiceState: VoiceState
        +<<getter>>name(): string
        +<<getter>>role(): Promise<Role>
        +<<getter>>channel(): GuildChannel | undefined
        +<<readonly>>{static}IDENTIFIER: string
        +{static}isConnectedVC(oldState: VoiceState, newState: VoiceState): boolean
        +{static}isLeavedVC(oldState: VoiceState, newState: VoiceState): boolean
        +{static}isSwitchedVC(oldState: VoiceState, newState: VoiceState): boolean
        +<<async>>create(): Promise<GuildChannel>
        +<<async>>isViewableMember(member: GuildMember): Promise<boolean>
        +<<async>>join(member: GuildMember): Promise<void>
        +<<async>>leave(member: GuildMember): Promise<void>
    }
}

Help --|> Command
RandomTeamChat --|> Command
RandomTeamVoice --|> Command
Recruit --|> Command
Who --|> Command

OmittableCommandParameter --|> CommandParameter
OmittableMemberParameter --|> MemberParameter
OmittableMembersParameter --|> MembersParameter
OmittableNumberParameter --|> NumberParameter
CommandParameter --|> Parameter
FreeWriteParameter --|> Parameter
MemberParameter --|> Parameter
MembersParameter --|> Parameter
NumberParameter --|> Parameter

DiscordUpdate --|> DTO
FormTask --|> DTO
InRoomMember --|> DTO
RoomData --|> DTO
DiscordData --|> DTO
FormTaskData --|> DTO
GameData --|> DTO
MemberData --|> DTO
NoneResponse --|> DTO

RecruitForm --|> Form

Recruit ..|> IExecutedCallback

OmittableCommandParameter ..|> IOmittable
OmittableMemberParameter ..|> IOmittable
OmittableMembersParameter ..|> IOmittable
OmittableNumberParameter ..|> IOmittable

DiscordID ..|> IQuery
FormTaskUpdate ..|> IQuery

CommandFactory ..|> IFactory

Parameter --o Command

FormType --* Form
FormTask --* Form
Team --* RecruitForm
InRoomMember --* RoomData
GameData --* MemberData
DiscordData --* MemberData
FormTask --* FormTaskData

Network .up.> IQuery
Network .up.> DTO

CommandFactory -left-> Command : create
Recruit --> Network : use
Who --> Network : use

@enduml